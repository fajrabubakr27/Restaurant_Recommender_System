# -*- coding: utf-8 -*-
"""Restaurant_Recommender_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YJEwIGvn6xWGLkea5s_cLEfbTi80v8wt
"""

#from google.colab import files
#files.upload()

#!pip install kaggle

#!mkdir -p ~/.kaggle
#!cp kaggle.json ~/.kaggle/
#!chmod 600 ~/.kaggle/kaggle.json

#!kaggle datasets download -d shrutimehta/zomato-restaurants-data

#!unzip zomato-restaurants-data.zip

import pandas as pd

df = pd.read_csv("zomato.csv", encoding='ISO-8859-1')
df.head()

#df.shape

#df.columns

#df.sample(5)

columns_to_drop = [
    'Restaurant ID', 'Address', 'Locality Verbose',
    'Currency', 'Switch to order menu',
    'Has Table booking', 'Has Online delivery', 'Is delivering now',
    'Rating color', 'Rating text'
]

df.drop(columns=columns_to_drop, inplace=True, errors='ignore')
#df.shape

df.isnull().sum()

df['Cuisines'] = df['Cuisines'].str.lower().str.strip()

df['Average Cost for two'] = df['Average Cost for two'].astype(str).str.replace(',', '').astype(float)

df['Aggregate rating'] = df['Aggregate rating'].astype(float)

df['Restaurant Name'] = df['Restaurant Name'].str.strip()

def cost_category(cost):
    if cost < 300:
        return 'low'
    elif 300 <= cost <= 700:
        return 'medium'
    else:
        return 'high'

df['Cost Category'] = df['Average Cost for two'].apply(cost_category)

df['Main Cuisine'] = df['Cuisines'].apply(lambda x: str(x).split(',')[0].strip())

df = df[df['Aggregate rating'] <= 5]

df[['Restaurant Name', 'Main Cuisine', 'Average Cost for two', 'Cost Category', 'Aggregate rating']].sample(5)

def filter_and_rank(df, cuisine, budget, city, top_n=10):
    filtered_df = df[
        (df['Main Cuisine'].str.contains(cuisine.lower())) &
        (df['Cost Category'] == budget.lower()) &
        (df['City'].str.lower() == city.lower())
    ]

    filtered_df = filtered_df[filtered_df['Aggregate rating'].notnull()]

    import numpy as np
    filtered_df['Score'] = filtered_df['Aggregate rating'] * np.log1p(filtered_df['Votes'])

    top_restaurants = filtered_df.sort_values(by='Score', ascending=False).head(top_n)

    top_restaurants['Explanation'] = top_restaurants.apply(
        lambda row: f"Matched on {row['Main Cuisine']} cuisine and {budget} budget with {row['Aggregate rating']}★ rating",
        axis=1
    )

    return top_restaurants[['Restaurant Name', 'City', 'Main Cuisine', 'Average Cost for two', 'Aggregate rating', 'Votes', 'Explanation']]

filter_and_rank(df, cuisine='north indian', budget='medium', city='new delhi')

feedback_columns = ['User_ID', 'Satisfaction_Score', 'Relevance_Score', 'Comments']
try:
    feedback_df = pd.read_csv('user_feedback.csv')
except FileNotFoundError:
    feedback_df = pd.DataFrame(columns=feedback_columns)

def collect_feedback(user_id):
    print("Please rate your satisfaction with the recommendations (1-5):")
    satisfaction = int(input())
    print("Please rate the relevance of recommendations (1-5):")
    relevance = int(input())
    print("Any additional comments? (type and press Enter):")
    comments = input()

    global feedback_df
    new_feedback = {'User_ID': user_id, 'Satisfaction_Score': satisfaction,
                    'Relevance_Score': relevance, 'Comments': comments}
    feedback_df = feedback_df.append(new_feedback, ignore_index=True)
    feedback_df.to_csv('user_feedback.csv', index=False)
    print("Thank you for your feedback!")

# مثال تشغيل:
# collect_feedback('user_001')

def summarize_feedback():
    if feedback_df.empty:
        print("No feedback collected yet.")
        return
    print("Average Satisfaction Score:", feedback_df['Satisfaction_Score'].mean())
    print("Average Relevance Score:", feedback_df['Relevance_Score'].mean())
    print("\nComments summary:")
    for comment in feedback_df['Comments'].dropna():
        print("-", comment)

import streamlit as st
import numpy as np
import os


FEEDBACK_FILE = 'user_feedback.csv'

def save_feedback(user_id, satisfaction, relevance, comments):
    if os.path.exists(FEEDBACK_FILE):
        feedback_df = pd.read_csv(FEEDBACK_FILE)
    else:
        feedback_df = pd.DataFrame(columns=['User_ID', 'Satisfaction_Score', 'Relevance_Score', 'Comments'])

    new_entry = {
        'User_ID': user_id,
        'Satisfaction_Score': satisfaction,
        'Relevance_Score': relevance,
        'Comments': comments
    }
    feedback_df = feedback_df.append(new_entry, ignore_index=True)
    feedback_df.to_csv(FEEDBACK_FILE, index=False)


st.title("Restaurant Recommender System with Feedback")

selected_city = st.sidebar.selectbox("City", sorted(df['City'].dropna().unique()))
selected_cuisine = st.sidebar.selectbox("Cuisine", sorted(df['Main Cuisine'].dropna().unique()))
selected_budget = st.sidebar.selectbox("Budget", ['low', 'medium', 'high'])

if st.sidebar.button("Recommend"):
    results = filter_and_rank(df, selected_cuisine, selected_budget, selected_city)

    if results.empty:
        st.warning("No restaurants matched your preferences")
    else:
        for _, row in results.iterrows():
            st.subheader(row['Restaurant Name'])
            st.write(f"Cuisine: {row['Main Cuisine']}")
            st.write(f"Cost for two: ₹{row['Average Cost for two']}")
            st.write(f"Rating: {row['Aggregate rating']} ({int(row['Votes'])} votes)")
            st.info(row['Explanation'])
            st.markdown("---")

        st.subheader("Please give your feedback on these recommendations:")

        with st.form(key='feedback_form'):
            user_id = st.text_input("User ID (or leave blank)")
            satisfaction = st.slider("Satisfaction with recommendations", 1, 5, 3)
            relevance = st.slider("Relevance of recommendations", 1, 5, 3)
            comments = st.text_area("Additional comments (optional)")
            submit_feedback = st.form_submit_button("Submit Feedback")

        if submit_feedback:
            uid = user_id if user_id else 'anonymous'
            save_feedback(uid, satisfaction, relevance, comments)
            st.success("Thank you for your feedback!")
